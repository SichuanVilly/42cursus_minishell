42Cursus Minishell

This project is part of the 42cursus curriculum and consists of creating a simple UNIX shell. The purpose of this project is to understand how shells work, handle system calls, and implement key concepts like process control, file descriptors, and pipes.
Table of Contents

    Description

    Installation

    Usage

    Features

    Built With

    License

Description

Minishell is a basic shell implementation that mimics the functionalities of a standard Unix shell. This project allows you to run commands, handle pipes, and redirect input/output, providing a solid foundation for understanding the inner workings of shell environments.
Key Features:

    Command parsing and execution

    Input/output redirection (>, <)

    Piping between commands (|)

    Environment variable handling

    Signal handling (e.g., handling SIGINT)

Installation

    Clone the repository:

git clone https://github.com/SichuanVilly/42cursus_minishell.git

Navigate to the project directory:

cd 42cursus_minishell

Compile the project using make:

    make

    This will create the minishell executable.

Usage

To run the minishell, simply execute:

./minishell

You can now type commands into the shell, and it will execute them like a standard shell.
Example:

$ ./minishell
$ echo "Hello, World!"
Hello, World!
$ ls -l | grep ".c"
-rw-r--r-- 1 user user 1234 file1.c
-rw-r--r-- 1 user user 5678 file2.c

Features

    Command Execution: Handles basic commands like ls, echo, pwd, and more.

    Piping: Supports piping between commands to chain their outputs.

    Redirection: Supports input and output redirection (>, <).

    Environment Variables: Allows setting and accessing environment variables.

    Signal Handling: Properly handles signals like SIGINT.

Built With

    C – The programming language used to implement the shell.

    Make – The build automation tool used to compile the project.

    System Calls – Utilized for command execution, file manipulation, and process control.
